import { e } from '../../helpers';
export function propertyToVCardString(property) {
    let str = '';
    if (property.language) {
        str += ';LANGUAGE=' + e(property.language);
    }
    if (property.value) {
        str += ';VALUE=' + e(property.value);
    }
    if (property.altid) {
        str += ';ALTID=' + e(property.altid);
    }
    if (property.pid) {
        str += ';PID=' + property.pid.map(s => e(s)).join(',');
    }
    if (property.type) {
        if (Array.isArray(property.type)) {
            if (property.type.length === 1) {
                str += ';TYPE=' + property.type[0];
            }
            else {
                str += ';TYPE="' + property.type.map(s => s.toLowerCase()).join(',') + '"';
            }
        }
        else {
            str += ';TYPE=' + property.type;
        }
    }
    if (property.mediatype) {
        str += ';MEDIATYPE=' + e(property.mediatype);
    }
    if (property.pref) {
        str += ';PREF=' + property.pref;
    }
    if (property.calscale) {
        str += ';CALSCALE=' + e(property.calscale);
    }
    if (property.sortas) {
        str += ';SORT-AS="' + property.sortas.map(s => e(s)).join(',') + '"';
    }
    if (property.geo) {
        str += ';GEO=' + e(property.geo);
    }
    if (property.timezone) {
        str += ';TZ=' + e(property.timezone);
    }
    return str;
}
export function isPropertyWithParameters(object) {
    const test = object;
    if (test == null || test.param == null || test.value == null) {
        return false;
    }
    return (test.param.language !== undefined ||
        test.param.value !== undefined ||
        test.param.pref !== undefined ||
        test.param.altid !== undefined ||
        test.param.pid !== undefined ||
        test.param.type !== undefined ||
        test.param.mediatype !== undefined ||
        test.param.calscale !== undefined ||
        test.param.sortas !== undefined ||
        test.param.geo !== undefined ||
        test.param.timezone !== undefined);
}
export function isPropertyWithParametersAddressValue(object) {
    const test = object;
    if (test == null || test.param == null || test.value == null) {
        return false;
    }
    return (test.param.language !== undefined ||
        test.param.value !== undefined ||
        test.param.pref !== undefined ||
        test.param.altid !== undefined ||
        test.param.pid !== undefined ||
        test.param.type !== undefined ||
        test.param.mediatype !== undefined ||
        test.param.calscale !== undefined ||
        test.param.sortas !== undefined ||
        test.param.geo !== undefined ||
        test.param.timezone !== undefined);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzaWNQcm9wZXJ0eVBhcmFtZXRlcnMudHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC12Y2FyZC9zcmMvbGliL3R5cGVzL3BhcmFtZXRlci9CYXNpY1Byb3BlcnR5UGFyYW1ldGVycy50eXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxlQUFlLENBQUM7QUE2TWxDLE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxRQUFpQztJQUNyRSxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDYixJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUU7UUFDckIsR0FBRyxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQzVDO0lBQ0QsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFO1FBQ2xCLEdBQUcsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN0QztJQUNELElBQUksUUFBUSxDQUFDLEtBQUssRUFBRTtRQUNsQixHQUFHLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDdEM7SUFDRCxJQUFJLFFBQVEsQ0FBQyxHQUFHLEVBQUU7UUFDaEIsR0FBRyxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN4RDtJQUNELElBQUksUUFBUSxDQUFDLElBQUksRUFBRTtRQUNqQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2hDLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFF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QUM7S0FDZDtJQUNELE9BQU8sQ0FDTCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsS0FBSyxTQUFTO1FBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLFNBQVM7UUFDOUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssU0FBUztRQUM3QixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxTQUFTO1FBQzlCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLFNBQVM7UUFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssU0FBUztRQUM3QixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsS0FBSyxTQUFTO1FBQ2xDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxLQUFLLFNBQVM7UUFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssU0FBUztRQUMvQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxTQUFTO1FBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FDbEMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZGRyZXNzIH0gZnJvbSAnLi4vdkNhcmQnO1xuaW1wb3J0IHsgZSB9IGZyb20gJy4uLy4uL2hlbHBlcnMnO1xuXG4vKipcbiAqIEEgcHJvcGVydHkgY2FuIGhhdmUgYXR0cmlidXRlcyBhc3NvY2lhdGVkIHdpdGggaXQuXG4gKiBUaGVzZSBcInByb3BlcnR5IHBhcmFtZXRlcnNcIiBjb250YWluIG1ldGEtaW5mb3JtYXRpb24gYWJvdXQgdGhlIHByb3BlcnR5IG9yIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqIEBsaW5rIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2MzUwI3NlY3Rpb24tNVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJhc2ljUHJvcGVydHlQYXJhbWV0ZXJzIHtcbiAgLyoqXG4gICAqIFRoZSBMQU5HVUFHRSBwcm9wZXJ0eSBwYXJhbWV0ZXIgaXMgdXNlZCB0byBpZGVudGlmeSBkYXRhIGluIG11bHRpcGxlIGxhbmd1YWdlcy5cbiAgICogQGtpbmQgUHJvcGVydHk6IExBTkdVQUdFXG4gICAqIEBsaW5rIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2MzUwI3NlY3Rpb24tNS4xXG4gICAqXG4gICAqL1xuICBsYW5ndWFnZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBWQUxVRSBwYXJhbWV0ZXIgaXMgT1BUSU9OQUwsIHVzZWQgdG8gaWRlbnRpZnkgdGhlIHZhbHVlIHR5cGUgKGRhdGEgdHlwZSkgYW5kIGZvcm1hdCBvZiB0aGUgdmFsdWUuXG4gICAqIEBraW5kIFByb3BlcnR5OiBWQUxVRVxuICAgKiBAbGluayBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjM1MCNzZWN0aW9uLTUuMlxuICAgKi9cbiAgdmFsdWU/OlxuICAgIHwgJ3RleHQnXG4gICAgfCAndXJpJ1xuICAgIHwgJ2RhdGUnXG4gICAgfCAndGltZSdcbiAgICB8ICdkYXRlLXRpbWUnXG4gICAgfCAnZGF0ZS1hbmQtb3ItdGltZSdcbiAgICB8ICd0aW1lc3RhbXAnXG4gICAgfCAnYm9vbGVhbidcbiAgICB8ICdpbnRlZ2VyJ1xuICAgIHwgJ2Zsb2F0J1xuICAgIHwgJ3V0Yy1vZmZzZXQnXG4gICAgfCAnbGFuZ3VhZ2UtdGFnJztcbiAgLyoqXG4gICAqIFRoZSBQUkVGIHBhcmFtZXRlciBpcyBPUFRJT05BTCBhbmQgaXMgdXNlZCB0byBpbmRpY2F0ZSB0aGF0IHRoZSBjb3JyZXNwb25kaW5nIGluc3RhbmNlIG9mIGEgcHJvcGVydHkgaXMgcHJlZmVycmVkIGJ5IHRoZSB2Q2FyZCBhdXRob3IuXG4gICAqIEl0cyB2YWx1ZSBNVVNUIGJlIGFuIGludGVnZXIgYmV0d2VlbiAxIGFuZCAxMDAgdGhhdCBxdWFudGlmaWVzIHRoZSBsZXZlbCBvZiBwcmVmZXJlbmNlLlxuICAgKiBMb3dlciB2YWx1ZXMgY29ycmVzcG9uZCB0byBhIGhpZ2hlciBsZXZlbCBvZiBwcmVmZXJlbmNlLCB3aXRoIDEgYmVpbmcgbW9zdCBwcmVmZXJyZWQuXG4gICAqIEBraW5kIFByb3BlcnR5OiBQUkVGXG4gICAqIEBsaW5rIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2MzUwI3NlY3Rpb24tNS4zXG4gICAqL1xuICBwcmVmPzpcbiAgICB8IDFcbiAgICB8IDJcbiAgICB8IDNcbiAgICB8IDRcbiAgICB8IDVcbiAgICB8IDZcbiAgICB8IDdcbiAgICB8IDhcbiAgICB8IDlcbiAgICB8IDEwXG4gICAgfCAxMVxuICAgIHwgMTJcbiAgICB8IDEzXG4gICAgfCAxNFxuICAgIHwgMTVcbiAgICB8IDE2XG4gICAgfCAxN1xuICAgIHwgMThcbiAgICB8IDE5XG4gICAgfCAyMFxuICAgIHwgMjFcbiAgICB8IDIyXG4gICAgfCAyM1xuICAgIHwgMjRcbiAgICB8IDI1XG4gICAgfCAyNlxuICAgIHwgMjdcbiAgICB8IDI4XG4gICAgfCAyOVxuICAgIHwgMzBcbiAgICB8IDMxXG4gICAgfCAzMlxuICAgIHwgMzNcbiAgICB8IDM0XG4gICAgfCAzNVxuICAgIHwgMzZcbiAgICB8IDM3XG4gICAgfCAzOFxuICAgIHwgMzlcbiAgICB8IDQwXG4gICAgfCA0MVxuICAgIHwgNDJcbiAgICB8IDQzXG4gICAgfCA0NFxuICAgIHwgNDVcbiAgICB8IDQ2XG4gICAgfCA0N1xuICAgIHwgNDhcbiAgICB8IDQ5XG4gICAgfCA1MFxuICAgIHwgNTFcbiAgICB8IDUyXG4gICAgfCA1M1xuICAgIHwgNTRcbiAgICB8IDU1XG4gICAgfCA1NlxuICAgIHwgNTdcbiAgICB8IDU4XG4gICAgfCA1OVxuICAgIHwgNjBcbiAgICB8IDYxXG4gICAgfCA2MlxuICAgIHwgNjNcbiAgICB8IDY0XG4gICAgfCA2NVxuICAgIHwgNjZcbiAgICB8IDY3XG4gICAgfCA2OFxuICAgIHwgNjlcbiAgICB8IDcwXG4gICAgfCA3MVxuICAgIHwgNzJcbiAgICB8IDczXG4gICAgfCA3NFxuICAgIHwgNzVcbiAgICB8IDc2XG4gICAgfCA3N1xuICAgIHwgNzhcbiAgICB8IDc5XG4gICAgfCA4MFxuICAgIHwgODFcbiAgICB8IDgyXG4gICAgfCA4M1xuICAgIHwgODRcbiAgICB8IDg1XG4gICAgfCA4NlxuICAgIHwgODdcbiAgICB8IDg4XG4gICAgfCA4OVxuICAgIHwgOTBcbiAgICB8IDkxXG4gICAgfCA5MlxuICAgIHwgOTNcbiAgICB8IDk0XG4gICAgfCA5NVxuICAgIHwgOTZcbiAgICB8IDk3XG4gICAgfCA5OFxuICAgIHwgOTlcbiAgICB8IDEwMDtcbiAgLyoqXG4gICAqIFRoZSBBTFRJRCBwYXJhbWV0ZXIgaXMgdXNlZCB0byBcInRhZ1wiIHByb3BlcnR5IGluc3RhbmNlcyBhcyBiZWluZyBhbHRlcm5hdGl2ZSByZXByZXNlbnRhdGlvbnMgb2YgdGhlIHNhbWUgbG9naWNhbCBwcm9wZXJ0eS5cbiAgICogRm9yIGV4YW1wbGUsIHRyYW5zbGF0aW9ucyBvZiBhIHByb3BlcnR5IGluIG11bHRpcGxlIGxhbmd1YWdlcyBnZW5lcmF0ZXMgbXVsdGlwbGUgcHJvcGVydHkgaW5zdGFuY2VzXG4gICAqIGhhdmluZyBkaWZmZXJlbnQgTEFOR1VBR0UgcGFyYW1ldGVyIHRoYXQgYXJlIHRhZ2dlZCB3aXRoIHRoZSBzYW1lIEFMVElEIHZhbHVlLlxuICAgKiBAa2luZCBQcm9wZXJ0eTogQUxUSURcbiAgICogQGxpbmsgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzYzNTAjc2VjdGlvbi01LjRcbiAgICovXG4gIGFsdGlkPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIFBJRCBwYXJhbWV0ZXIgaXMgdXNlZCB0byBpZGVudGlmeSBhIHNwZWNpZmljIHByb3BlcnR5IGFtb25nIG11bHRpcGxlIGluc3RhbmNlcy5cbiAgICogQGtpbmQgUHJvcGVydHk6IFBJRFxuICAgKiBAbGluayBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjM1MCNzZWN0aW9uLTUuNVxuICAgKi9cbiAgcGlkPzogc3RyaW5nW107XG4gIC8qKlxuICAgKiBUaGUgVFlQRSBwYXJhbWV0ZXIgaGFzIG11bHRpcGxlLCBkaWZmZXJlbnQgdXNlcy5cbiAgICogSW4gZ2VuZXJhbCwgaXQgaXMgYSB3YXkgb2Ygc3BlY2lmeWluZyBjbGFzcyBjaGFyYWN0ZXJpc3RpY3Mgb2YgdGhlIGFzc29jaWF0ZWQgcHJvcGVydHkuXG4gICAqIEBraW5kIFByb3BlcnR5OiBUWVBFXG4gICAqIEBsaW5rIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2MzUwI3NlY3Rpb24tNS42XG4gICAqL1xuICB0eXBlPzpcbiAgICB8IEFycmF5PCd3b3JrJyB8ICdob21lJyB8ICd0ZXh0JyB8ICd2b2ljZScgfCAnZmF4JyB8ICdjZWxsJyB8ICd2aWRlbycgfCAncGFnZXInIHwgJ3RleHRwaG9uZSc+XG4gICAgfCAnd29yaydcbiAgICB8ICdob21lJ1xuICAgIHwgJ3RleHQnXG4gICAgfCAndm9pY2UnXG4gICAgfCAnZmF4J1xuICAgIHwgJ2NlbGwnXG4gICAgfCAndmlkZW8nXG4gICAgfCAncGFnZXInXG4gICAgfCAndGV4dHBob25lJztcbiAgLyoqXG4gICAqIFRoZSBNRURJQVRZUEUgcGFyYW1ldGVyIGlzIHVzZWQgd2l0aCBwcm9wZXJ0aWVzIHdob3NlIHZhbHVlIGlzIGEgVVJJLlxuICAgKiBAa2luZCBQcm9wZXJ0eTogTUVESUFUWVBFXG4gICAqIEBsaW5rIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2MzUwI3NlY3Rpb24tNS43XG4gICAqL1xuICBtZWRpYXR5cGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgQ0FMU0NBTEUgcGFyYW1ldGVyIGlzIHVzZWQgdG8gZGVmaW5lIHRoZSBjYWxlbmRhciBzeXN0ZW0gaW4gd2hpY2ggYSBkYXRlIG9yIGRhdGUtdGltZSB2YWx1ZSBpcyBleHByZXNzZWQuXG4gICAqIEBraW5kIFByb3BlcnR5OiBDQUxTQ0FMRVxuICAgKiBAbGluayBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjM1MCNzZWN0aW9uLTUuOFxuICAgKi9cbiAgY2Fsc2NhbGU/OiAnZ3JlZ29yaWFuJztcbiAgLyoqXG4gICAqIFRoZSBcInNvcnQtYXNcIiBwYXJhbWV0ZXIgaXMgdXNlZCB0byBzcGVjaWZ5IHRoZSBzdHJpbmcgdG8gYmUgdXNlZCBmb3IgbmF0aW9uYWwtbGFuZ3VhZ2Utc3BlY2lmaWMgc29ydGluZy5cbiAgICogV2l0aG91dCB0aGlzIGluZm9ybWF0aW9uLCBzb3J0aW5nIGFsZ29yaXRobXMgY291bGQgaW5jb3JyZWN0bHkgc29ydCB0aGlzIHZDYXJkIHdpdGhpbiBhIHNlcXVlbmNlIG9mIHNvcnRlZCB2Q2FyZHMuXG4gICAqIEBraW5kIFByb3BlcnR5OiBTT1JULUFTXG4gICAqIEBsaW5rIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2MzUwI3NlY3Rpb24tNS45XG4gICAqL1xuICBzb3J0YXM/OiBzdHJpbmdbXTtcbiAgLyoqXG4gICAqIFRoZSBHRU8gcGFyYW1ldGVyIGNhbiBiZSB1c2VkIHRvIGluZGljYXRlIGdsb2JhbCBwb3NpdGlvbmluZyBpbmZvcm1hdGlvbiB0aGF0IGlzIHNwZWNpZmljIHRvIGFuIGFkZHJlc3MuXG4gICAqIEBraW5kIFByb3BlcnR5OiBHRU9cbiAgICogQGxpbmsgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzYzNTAjc2VjdGlvbi01LjEwXG4gICAqL1xuICBnZW8/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgVFogcGFyYW1ldGVyIGNhbiBiZSB1c2VkIHRvIGluZGljYXRlIHRpbWUgem9uZSBpbmZvcm1hdGlvbiB0aGF0IGlzIHNwZWNpZmljIHRvIGFuIGFkZHJlc3MuXG4gICAqIEBraW5kIFByb3BlcnR5OiBUWlxuICAgKiBAbGluayBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjM1MCNzZWN0aW9uLTUuMTFcbiAgICovXG4gIHRpbWV6b25lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvcGVydHlUb1ZDYXJkU3RyaW5nKHByb3BlcnR5OiBCYXNpY1Byb3BlcnR5UGFyYW1ldGVycyk6IHN0cmluZyB7XG4gIGxldCBzdHIgPSAnJztcbiAgaWYgKHByb3BlcnR5Lmxhbmd1YWdlKSB7XG4gICAgc3RyICs9ICc7TEFOR1VBR0U9JyArIGUocHJvcGVydHkubGFuZ3VhZ2UpO1xuICB9XG4gIGlmIChwcm9wZXJ0eS52YWx1ZSkge1xuICAgIHN0ciArPSAnO1ZBTFVFPScgKyBlKHByb3BlcnR5LnZhbHVlKTtcbiAgfVxuICBpZiAocHJvcGVydHkuYWx0aWQpIHtcbiAgICBzdHIgKz0gJztBTFRJRD0nICsgZShwcm9wZXJ0eS5hbHRpZCk7XG4gIH1cbiAgaWYgKHByb3BlcnR5LnBpZCkge1xuICAgIHN0ciArPSAnO1BJRD0nICsgcHJvcGVydHkucGlkLm1hcChzID0+IGUocykpLmpvaW4oJywnKTtcbiAgfVxuICBpZiAocHJvcGVydHkudHlwZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BlcnR5LnR5cGUpKSB7XG4gICAgICBpZiAocHJvcGVydHkudHlwZS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgc3RyICs9ICc7VFlQRT0nICsgcHJvcGVydHkudHlwZVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciArPSAnO1RZUEU9XCInICsgcHJvcGVydHkudHlwZS5tYXAocyA9PiBzLnRvTG93ZXJDYXNlKCkpLmpvaW4oJywnKSArICdcIic7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnO1RZUEU9JyArIHByb3BlcnR5LnR5cGU7XG4gICAgfVxuICB9XG4gIGlmIChwcm9wZXJ0eS5tZWRpYXR5cGUpIHtcbiAgICBzdHIgKz0gJztNRURJQVRZUEU9JyArIGUocHJvcGVydHkubWVkaWF0eXBlKTtcbiAgfVxuICBpZiAocHJvcGVydHkucHJlZikge1xuICAgIHN0ciArPSAnO1BSRUY9JyArIHByb3BlcnR5LnByZWY7XG4gIH1cbiAgaWYgKHByb3BlcnR5LmNhbHNjYWxlKSB7XG4gICAgc3RyICs9ICc7Q0FMU0NBTEU9JyArIGUocHJvcGVydHkuY2Fsc2NhbGUpO1xuICB9XG4gIGlmIChwcm9wZXJ0eS5zb3J0YXMpIHtcbiAgICBzdHIgKz0gJztTT1JULUFTPVwiJyArIHByb3BlcnR5LnNvcnRhcy5tYXAocyA9PiBlKHMpKS5qb2luKCcsJykgKyAnXCInO1xuICB9XG4gIGlmIChwcm9wZXJ0eS5nZW8pIHtcbiAgICBzdHIgKz0gJztHRU89JyArIGUocHJvcGVydHkuZ2VvKTtcbiAgfVxuICBpZiAocHJvcGVydHkudGltZXpvbmUpIHtcbiAgICBzdHIgKz0gJztUWj0nICsgZShwcm9wZXJ0eS50aW1lem9uZSk7XG4gIH1cblxuICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQcm9wZXJ0eVdpdGhQYXJhbWV0ZXJzKG9iamVjdDogYW55KTogb2JqZWN0IGlzIHsgdmFsdWU/OiBzdHJpbmc7IHBhcmFtPzogQmFzaWNQcm9wZXJ0eVBhcmFtZXRlcnMgfSB7XG4gIGNvbnN0IHRlc3QgPSA8eyB2YWx1ZT86IHN0cmluZzsgcGFyYW0/OiBCYXNpY1Byb3BlcnR5UGFyYW1ldGVycyB9Pm9iamVjdDtcbiAgaWYgKHRlc3QgPT0gbnVsbCB8fCB0ZXN0LnBhcmFtID09IG51bGwgfHwgdGVzdC52YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdGVzdC5wYXJhbS5sYW5ndWFnZSAhPT0gdW5kZWZpbmVkIHx8XG4gICAgdGVzdC5wYXJhbS52YWx1ZSAhPT0gdW5kZWZpbmVkIHx8XG4gICAgdGVzdC5wYXJhbS5wcmVmICE9PSB1bmRlZmluZWQgfHxcbiAgICB0ZXN0LnBhcmFtLmFsdGlkICE9PSB1bmRlZmluZWQgfHxcbiAgICB0ZXN0LnBhcmFtLnBpZCAhPT0gdW5kZWZpbmVkIHx8XG4gICAgdGVzdC5wYXJhbS50eXBlICE9PSB1bmRlZmluZWQgfHxcbiAgICB0ZXN0LnBhcmFtLm1lZGlhdHlwZSAhPT0gdW5kZWZpbmVkIHx8XG4gICAgdGVzdC5wYXJhbS5jYWxzY2FsZSAhPT0gdW5kZWZpbmVkIHx8XG4gICAgdGVzdC5wYXJhbS5zb3J0YXMgIT09IHVuZGVmaW5lZCB8fFxuICAgIHRlc3QucGFyYW0uZ2VvICE9PSB1bmRlZmluZWQgfHxcbiAgICB0ZXN0LnBhcmFtLnRpbWV6b25lICE9PSB1bmRlZmluZWRcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvcGVydHlXaXRoUGFyYW1ldGVyc0FkZHJlc3NWYWx1ZShcbiAgb2JqZWN0OiBhbnlcbik6IG9iamVjdCBpcyB7IHZhbHVlPzogQWRkcmVzczsgcGFyYW0/OiBCYXNpY1Byb3BlcnR5UGFyYW1ldGVycyB9IHtcbiAgY29uc3QgdGVzdCA9IDx7IHZhbHVlPzogQWRkcmVzczsgcGFyYW0/OiBCYXNpY1Byb3BlcnR5UGFyYW1ldGVycyB9Pm9iamVjdDtcbiAgaWYgKHRlc3QgPT0gbnVsbCB8fCB0ZXN0LnBhcmFtID09IG51bGwgfHwgdGVzdC52YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdGVzdC5wYXJhbS5sYW5ndWFnZSAhPT0gdW5kZWZpbmVkIHx8XG4gICAgdGVzdC5wYXJhbS52YWx1ZSAhPT0gdW5kZWZpbmVkIHx8XG4gICAgdGVzdC5wYXJhbS5wcmVmICE9PSB1bmRlZmluZWQgfHxcbiAgICB0ZXN0LnBhcmFtLmFsdGlkICE9PSB1bmRlZmluZWQgfHxcbiAgICB0ZXN0LnBhcmFtLnBpZCAhPT0gdW5kZWZpbmVkIHx8XG4gICAgdGVzdC5wYXJhbS50eXBlICE9PSB1bmRlZmluZWQgfHxcbiAgICB0ZXN0LnBhcmFtLm1lZGlhdHlwZSAhPT0gdW5kZWZpbmVkIHx8XG4gICAgdGVzdC5wYXJhbS5jYWxzY2FsZSAhPT0gdW5kZWZpbmVkIHx8XG4gICAgdGVzdC5wYXJhbS5zb3J0YXMgIT09IHVuZGVmaW5lZCB8fFxuICAgIHRlc3QucGFyYW0uZ2VvICE9PSB1bmRlZmluZWQgfHxcbiAgICB0ZXN0LnBhcmFtLnRpbWV6b25lICE9PSB1bmRlZmluZWRcbiAgKTtcbn1cbiJdfQ==